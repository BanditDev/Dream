# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Profile {
  id: String!
  name: String
  avatar: String
  provider: String!
}

type User {
  id: String!
  name: String
  avatar: String
  locale: Locale!
  createdAt: DateTime!
  updatedAt: DateTime!
  profiles: [Profile!]
}

enum Locale {
  en_US
  ru_RU
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Community {
  id: String!
  name: String!
  title: String!
  avatar: String
  createdAt: DateTime!
  updatedAt: DateTime!
  onlineCount: Float!
}

type Channel {
  id: String!
  name: String!
  title: String!
  state: String
  mode: ChannelMode!
  avatar: String
  createdAt: DateTime!
  updatedAt: DateTime!
  onlineCount: Float!
}

enum ChannelMode {
  NONE
  WAITLIST_YOUTUBE
  WAITLIST_SPOTIFY
  STREAM_TWITCH
  STREAM_YOUTUBE
  COLLECTION_SPOTIFY
  COLLECTION_YOUTUBE
}

type ChannelMessage {
  id: String!
  content: String!
  channelId: String!
  userId: String!
  user: User!
  createdAt: String!
}

type SpotifyNow {
  id: String!
  imageUrl: String!
  artist: String!
  name: String!
  progress: Float!
}

type ModeWaitlistSpotifyTrack {
  id: String!
  title: String
  artists: String
  cover: String
  duration: Int
}

type ModeWaitlistSpotifyItem {
  id: String!
  duration: Int
  start: Int
  end: Int
  skipped: Boolean
  canceled: Boolean
  track: ModeWaitlistSpotifyTrack
  trackId: String
  authorId: String
  startedAt: String
  endedAt: String
  createdAt: String!
  updatedAt: String!
}

type ModeWaitlistSpotifyHistoryItemDataAuthor {
  id: String!
  name: String!
  avatar: String
}

type ModeWaitlistSpotifyHistoryItemData {
  id: String!
  trackId: String!
  duration: Int!
  cover: String!
  artists: String!
  title: String!
  startedAt: String
  endedAt: String
  author: ModeWaitlistSpotifyHistoryItemDataAuthor!
}

type ModeWaitlistSpotifyHistoryItem {
  actions: [ModeWaitlistSpotifyHistoryItemAction!]!
  data: ModeWaitlistSpotifyHistoryItemData!
}

enum ModeWaitlistSpotifyHistoryItemAction {
  ADD_TO_QUEUE
}

type ModeWaitlistSpotifyHistory {
  items: [ModeWaitlistSpotifyHistoryItem!]!
}

type ModeWaitlistSpotifyCurrentItemAuthor {
  id: String!
  name: String!
  avatar: String
}

type ModeWaitlistSpotifyCurrentItem {
  id: String!
  trackId: String!
  duration: Int!
  cover: String!
  artists: String!
  title: String!
  startedAt: String
  author: ModeWaitlistSpotifyCurrentItemAuthor!
}

type ModeWaitlistSpotifyCurrent {
  actions: [ModeWaitlistSpotifyCurrentAction!]!
  item: ModeWaitlistSpotifyCurrentItem
}

enum ModeWaitlistSpotifyCurrentAction {
  SKIP
}

type ModeWaitlistSpotifyQueueItemDataAuthor {
  id: String!
  name: String!
  avatar: String
}

type ModeWaitlistSpotifyQueueItemData {
  id: String!
  trackId: String!
  duration: Int!
  cover: String!
  artists: String!
  title: String!
  author: ModeWaitlistSpotifyQueueItemDataAuthor!
}

type ModeWaitlistSpotifyQueueItem {
  actions: [ModeWaitlistSpotifyQueueItemAction!]!
  data: ModeWaitlistSpotifyQueueItemData!
}

enum ModeWaitlistSpotifyQueueItemAction {
  CANCEL
}

type ModeWaitlistSpotifyQueue {
  actions: [ModeWaitlistSpotifyQueueAction!]!
  items: [ModeWaitlistSpotifyQueueItem!]!
}

enum ModeWaitlistSpotifyQueueAction {
  ADD_TRACK
}

type TwitchStream {
  id: String!
  channelKey: String
}

type Query {
  uniqCount: Int!
  user(id: ID): User
  me: User!
  community(name: String!): Community!
  communities: [Community!]!
  channel(name: String!): Channel!
  channels(name: String!): [Channel!]!
  channelMessages(channelId: ID!): [ChannelMessage!]!
  waitlistSpotifyHistory(channelName: String!): ModeWaitlistSpotifyHistory!
  waitlistSpotifyCurrent(channelName: String!): ModeWaitlistSpotifyCurrent!
  waitlistSpotifyQueue(channelName: String!): ModeWaitlistSpotifyQueue!
  waitlistSpotifyItem(itemId: String!): ModeWaitlistSpotifyItem!
  spotifyNow(token: String!): SpotifyNow
  spotifyToken: String!
  twitchStream(channelId: String!): TwitchStream!
}

type Mutation {
  logout: Boolean!
  updateConnectionStatus(channel: String, community: String): Boolean!
  setUserLocale(locale: Locale!): Boolean!
  createCommunity(input: CreateCommunityInput!): Community!
  createChannel(input: CreateChannelInput!): Channel!
  updateChannel(input: UpdateChannelInput!): Channel!
  deleteChannel(channelId: ID!): Channel!
  setChannelMode(input: SetChannelModeInput!): Channel!
  createChannelMessage(input: ChannelMessageCreateInput!): Boolean!
  waitlistSpotifyQueueAddTrack(channelId: String!): Boolean!
  waitlistSpotifyQueueSkipTrack(channelId: String!): Boolean!
  waitlistSpotifyUserSync(channelId: String!): Boolean!
  refreshSpotifyToken: String!
  updateTwitchStream(input: UpdateTwitchStreamInput!): TwitchStream!
}

input CreateCommunityInput {
  name: String!
  title: String!
}

input CreateChannelInput {
  communityId: ID!
  name: String!
  title: String!
}

input UpdateChannelInput {
  channelId: ID!
  communityId: ID!
  name: String!
  title: String!
}

input SetChannelModeInput {
  channelId: ID!
  mode: ChannelMode!
}

input ChannelMessageCreateInput {
  content: String!
  channelId: String!
}

input UpdateTwitchStreamInput {
  channelId: ID!
  channelKey: String!
}

type Subscription {
  channelMessageCreated(channelId: ID!): ChannelMessage!
  channelMessageDeleted(channelId: ID!): ChannelMessage!
  waitlistSpotifyCurrentUpdated(channelName: String!): Boolean!
  waitlistSpotifyQueueUpdated(channelName: String!): Boolean!
}
