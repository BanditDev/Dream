generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_URL")
}

model Token {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Connection {
  id         String   @id @default(cuid())
  instanceId String?
  ipHash     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  user       User?    @relation(fields: [userId], references: [id])
  channel    Channel? @relation(fields: [channelId], references: [id])
  userId     String?
  channelId  String?
}

enum Locale {
  en_US
  ru_RU
}

model User {
  id                      String                    @id @default(cuid())
  name                    String?
  avatar                  String?
  locale                  Locale?                   @default(en_US)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @default(now()) @updatedAt
  profiles                Profile[]
  tokens                  Token[]
  connection              Connection[]
  communities             Community[]
  channelMessages         ChannelMessage[]
  modeWaitlistSpotifyItem ModeWaitlistSpotifyItem[]
  modeWaitlistYoutubeItem ModeWaitlistYoutubeItem[]
}

model Profile {
  id           String  @id @default(cuid())
  provider     String
  serviceId    String
  name         String?
  avatar       String?
  email        String?
  accessToken  String?
  refreshToken String?
  user         User    @relation(fields: [userId], references: [id])
  userId       String
}

enum ChannelMode {
  NONE
  WAITLIST_YOUTUBE
  WAITLIST_SPOTIFY
  STREAM_TWITCH
  STREAM_YOUTUBE
  COLLECTION_SPOTIFY
  COLLECTION_YOUTUBE
}

model Community {
  id        String    @id @default(cuid())
  name      String    @unique
  title     String
  avatar    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  channels  Channel[]
  owner     User      @relation(fields: [ownerId], references: [id])
  ownerId   String
}

model Channel {
  id                      String                    @id @default(cuid())
  name                    String
  title                   String
  avatar                  String?
  state                   String?
  mode                    ChannelMode               @default(NONE)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @default(now()) @updatedAt
  community               Community                 @relation(fields: [communityId], references: [id])
  messages                ChannelMessage[]
  connections             Connection[]
  communityId             String
  modeWaitlistSpotifyItem ModeWaitlistSpotifyItem[]
  modeWaitlistSpotify     ModeWaitlistSpotify[]
  modeTwitchStream        ModeTwitchStream[]
  modeWaitlistYotubeItem  ModeWaitlistYoutubeItem[]
  modeWaitlistYoutube     ModeWaitlistYoutube[]
}

model ChannelMessage {
  id        String   @id @default(cuid())
  content   String
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  channel   Channel? @relation(fields: [channelId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  channelId String?
  userId    String
}

// External API
model SpotifyTrack {
  id                      String                    @id
  artists                 String
  title                   String
  cover                   String?
  duration                Int
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @default(now()) @updatedAt
  modeWaitlistSpotifyItem ModeWaitlistSpotifyItem[]
}

model YoutubeVideo {
  id                      String                    @id
  title                   String
  cover                   String?
  duration                Int
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @default(now()) @updatedAt
  modeWaitlistYoutubeItem ModeWaitlistYoutubeItem[]
}

// Channel Mods
// Waitlist Spotify

model ModeWaitlistSpotifyItem {
  id                  String                @id @default(cuid())
  duration            Int?                  @default(0)
  start               Int?                  @default(0) // (Start track position (0))
  end                 Int? // (End track position (=duration))
  skipped             Boolean?              @default(false) // (Manual skip (=flase))
  canceled            Boolean?              @default(false) // (Manual remove from Queue (=false))
  track               SpotifyTrack?         @relation(fields: [trackId], references: [id])
  trackId             String?
  channel             Channel?              @relation(fields: [channelId], references: [id])
  channelId           String?
  author              User?                 @relation(fields: [authorId], references: [id])
  authorId            String?
  startedAt           DateTime? // (Update after Waitlist.itemId changed)
  endedAt             DateTime? // (Update after skip (process or manual))
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now()) @updatedAt
  modeWaitlistSpotify ModeWaitlistSpotify[]
}

model ModeWaitlistSpotify {
  id        String                   @id @default(cuid())
  item      ModeWaitlistSpotifyItem? @relation(fields: [itemId], references: [id])
  itemId    String?
  channel   Channel?                 @relation(fields: [channelId], references: [id])
  channelId String?
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @default(now()) @updatedAt
}

// Twitch Stream
model ModeTwitchStream {
  id         String   @id @default(cuid())
  channelKey String?
  channel    Channel? @relation(fields: [channelId], references: [id])
  channelId  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

// Waitlist Youtube

model ModeWaitlistYoutubeItem {
  id                  String                @id @default(cuid())
  duration            Int?                  @default(0)
  start               Int?                  @default(0) // (Start video position (0))
  end                 Int? // (End video position (=duration))
  skipped             Boolean?              @default(false) // (Manual skip (=flase))
  canceled            Boolean?              @default(false) // (Manual remove from Queue (=false))
  video               YoutubeVideo?         @relation(fields: [videoId], references: [id])
  videoId             String?
  channel             Channel?              @relation(fields: [channelId], references: [id])
  channelId           String?
  author              User?                 @relation(fields: [authorId], references: [id])
  authorId            String?
  startedAt           DateTime? // (Update after Waitlist.itemId changed)
  endedAt             DateTime? // (Update after skip (process or manual))
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now()) @updatedAt
  modeWaitlistYoutube ModeWaitlistYoutube[]
}

model ModeWaitlistYoutube {
  id        String                   @id @default(cuid())
  item      ModeWaitlistYoutubeItem? @relation(fields: [itemId], references: [id])
  itemId    String?
  channel   Channel?                 @relation(fields: [channelId], references: [id])
  channelId String?
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @default(now()) @updatedAt
}
