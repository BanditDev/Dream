generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_URL")
}

model Token {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Connection {
  id         String   @id @default(cuid())
  instanceId String?
  ipHash     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  user       User?    @relation(fields: [userId], references: [id])
  channel    Channel? @relation(fields: [channelId], references: [id])
  userId     String?
  channelId  String?
}

model User {
  id              String            @id @default(cuid())
  name            String?
  avatar          String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  profiles        Profile[]
  Token           Token[]
  Connection      Connection[]
  CommunitySource CommunitySource[]
  Community       Community[]
  ChannelMessage  ChannelMessage[]
}

model Profile {
  id           String  @id @default(cuid())
  provider     String
  serviceId    String
  name         String?
  avatar       String?
  email        String?
  accessToken  String?
  refreshToken String?
  user         User    @relation(fields: [userId], references: [id])
  userId       String
}

model Source {
  id              String            @id @default(cuid())
  title           String
  cover           String?
  provider        String
  serviceId       String
  duration        Int               @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  CommunitySource CommunitySource[]
}

model CommunitySource {
  id          String    @id @default(cuid())
  playCount   Int       @default(0)
  lastPlayAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  community   Community @relation(fields: [communityId], references: [id])
  source      Source    @relation(fields: [sourceId], references: [id])
  user        User?     @relation(fields: [userId], references: [id])
  communityId String
  sourceId    String
  userId      String?
}

enum CommunityMode {
  WAITLIST
  COLLECTION
}

model Community {
  id              String            @id @default(cuid())
  name            String            @unique
  title           String
  avatar          String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  channels        Channel[]
  owner           User              @relation(fields: [ownerId], references: [id])
  ownerId         String
  CommunitySource CommunitySource[]
}

model Channel {
  id          String           @id @default(cuid())
  name        String
  title       String
  avatar      String?
  state       String?
  mode        CommunityMode    @default(WAITLIST)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now()) @updatedAt
  community   Community        @relation(fields: [communityId], references: [id])
  messages    ChannelMessage[]
  connections Connection[]
  communityId String
}

model ChannelMessage {
  id        String   @id @default(cuid())
  content   String
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  channel   Channel  @relation(fields: [channelId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  channelId String
  userId    String
}
