generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_URL")
}

model Token {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Connection {
  id         String   @id @default(cuid())
  instanceId String?
  ipHash     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  user       User?    @relation(fields: [userId], references: [id])
  channel    Channel? @relation(fields: [channelId], references: [id])
  userId     String?
  channelId  String?
}

model User {
  id                String                     @id @default(cuid())
  name              String?
  avatar            String?
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @default(now()) @updatedAt
  profiles          Profile[]
  tokens            Token[]
  connection        Connection[]
  communities       Community[]
  channelMessages   ChannelMessage[]
  modeWaitlistQueue ModeWaitlistSpotifyQueue[]
  modeWaitlist      ModeWaitlistSpotify[]
}

model Profile {
  id           String  @id @default(cuid())
  provider     String
  serviceId    String
  name         String?
  avatar       String?
  email        String?
  accessToken  String?
  refreshToken String?
  user         User    @relation(fields: [userId], references: [id])
  userId       String
}

model Source {
  id        String   @id @default(cuid())
  title     String
  cover     String?
  provider  String
  serviceId String
  duration  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum ChannelMode {
  WAITLIST_YOUTUBE
  WAITLIST_SPOTIFY
  STREAM_TWITCH
  STREAM_YOUTUBE
  COLLECTION_SPOTIFY
  COLLECTION_YOUTUBE
}

model Community {
  id        String    @id @default(cuid())
  name      String    @unique
  title     String
  avatar    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  channels  Channel[]
  owner     User      @relation(fields: [ownerId], references: [id])
  ownerId   String
}

model Channel {
  id                String                     @id @default(cuid())
  name              String
  title             String
  avatar            String?
  state             String?
  mode              ChannelMode                @default(WAITLIST_YOUTUBE)
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @default(now()) @updatedAt
  community         Community                  @relation(fields: [communityId], references: [id])
  messages          ChannelMessage[]
  connections       Connection[]
  communityId       String
  modeWaitlistQueue ModeWaitlistSpotifyQueue[]
  modeWaitlist      ModeWaitlistSpotify[]
}

model ChannelMessage {
  id        String   @id @default(cuid())
  content   String
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  channel   Channel  @relation(fields: [channelId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  channelId String
  userId    String
}

// Channel Mods
// Waitlist Spotify
model ModeWaitlistSpotifyQueue {
  id        String   @id @default(cuid())
  trackId   String
  artists   String
  title     String
  cover     String?
  duration  Int
  channel   Channel  @relation(fields: [channelId], references: [id])
  channelId String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ModeWaitlistSpotify {
  id        String   @id @default(cuid())
  trackId   String?
  artists   String?
  title     String?
  cover     String?
  duration  Int?
  channel   Channel  @relation(fields: [channelId], references: [id])
  channelId String
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  start     DateTime
  playkey   String?
}
